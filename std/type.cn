include std.cn

const Type.INT_ID 0;
const Type.PTR_ID 1;
const Type.ARRAY_ID 2;
const Type.ADDR_ID 3;
const Type.CUSTOM_TYPES_MIN_ID Type.ADDR_ID 1 +;

struct Type
  int id
  int size
  int is_primitive 

  nproc __eq__ Type typ -> int:
    if self.id typ.id == do
      if self.id Type.PTR_ID == do
        self 24 ptr+ (*Type) @ // TODO: Start using a cast and sizeoftype in here when compiler will allow
        typ 24 ptr+ (*Type) @
        bind self_type typ_type:
          self_type NULL ptr== typ_type NULL ptr== or
          dup not if
            drop
            self_type typ_type ==
          end
        end
      else if self.id Type.ARRAY_ID == do
        self 24 ptr+ (*Type) @ // TODO: Start using a cast and sizeoftype in here when compiler will allow
        typ 24 ptr+ (*Type) @
        ==
        self 32 ptr+ @
        typ 32 ptr+ @
        == and
      else if self.id Type.ADDR_ID == do
        // TODO: Start using a cast in here when compiler will allow
        self 24 ptr+ ([DYNAMIC_ARRAY_SIZE]) Type typ 24 ptr+ ([DYNAMIC_ARRAY_SIZE]) Type 
        self 32 ptr+ ([DYNAMIC_ARRAY_SIZE]) Type typ 32 ptr+ ([DYNAMIC_ARRAY_SIZE]) Type 
        bind self.in_types typ.in_types self.out_types typ.out_types:
          self.in_types array_length typ.in_types array_length !=
          self.out_types array_length typ.out_types  array_length !=
          or if
            0
          else
            // Check if self.in_types and typ.in_types are equal
            1 0 while dup self.in_types [] (int) bind cond index val: cond index cond val and end do
              swap drop // Drop the previous cond
              dup self.in_types [] over typ.in_types [] ==
              swap 1 +
            end drop

            // Check if self.out_types and typ.out_types are equal
            1 0 while dup self.out_types [] (int) bind cond index val: cond index cond val and end do
              swap drop // Drop the previous cond
              dup self.out_types [] over typ.out_types [] ==
              swap 1 +
            end drop
            and // And the the last cont of both loops
          end
        end
      else
        1
      end end end
    else
      0
    end
  end
end

struct (Type) PtrType
  Type type
end

struct (Type) ArrayType
  Type type
  int len
end

struct (Type) AddrType
  [DYNAMIC_ARRAY_SIZE] Type in_types
  [DYNAMIC_ARRAY_SIZE] Type out_types
end

struct (Type) Struct
  Struct parent
  [DYNAMIC_ARRAY_SIZE] Type fields
end

nproc print_type Type typ:
  typ.id u_to_str puts " " puts
  typ.size u_to_str puts " " puts
  if typ.is_primitive do
    "primitive " puts
  end
  if typ.id Type.PTR_ID == do
    "to: " puts 
    if typ (PtrType) .type NULL ptr!= do 
      typ (PtrType) .type print_type 
    else
      "void " puts 
    end
  end
  if typ.id Type.ADDR_ID == do
    "(" puts

    0 while dup typ (AddrType) .in_types [] (int) do
      dup typ (AddrType) .in_types [] print_type
      1 +
    end drop

    "->" puts

    0 while dup typ (AddrType) .out_types [] (int) do
      " " puts
      dup typ (AddrType) .out_types [] print_type
      1 +
    end drop

    ")" puts
  end
  if typ.id Type.ARRAY_ID == do
    "len: " puts 
    typ (ArrayType) .len u_to_str puts    
    " of: " puts 
    typ (ArrayType) .type print_type
  end
  if typ.id Type.CUSTOM_TYPES_MIN_ID >= do
    if typ (Struct) .parent NULL ptr!= do
      "parent: " puts typ (Struct) .parent print_type
    end
    "fields: " puts
    typ (Struct) .fields 0
    0 typ (Struct) .fields [] NULL ptr!=
    while
      bind arr index: 
        index arr [] print_type
        " " puts
        arr index 1 +
        dup arr [] NULL ptr!=
      end
    end drop drop
  end
end