include std.cn

const Struct_FIELDS_SIZE 0x7FFFFFFFFFFFFFFF ;

const Type.INT_ID 0 ;
const Type.PTR_ID 1 ;
const Type.ARRAY_ID 2 ;
const Type.ADDR_ID 3 ;
const Type.CUSTOM_TYPES_MIN_ID Type.ADDR_ID 1 + ;

struct Type
  int id
  int size
  int is_primitive 

  nproc __eq__ Type typ -> int:
    if self.id typ.id == do
      if self.id Type.PTR_ID == do
        self 24 ptr+ (*Type) @ // TODO: Start using a cast and sizeoftype in here when compiler will allow
        typ 24 ptr+ (*Type) @
        bind self_type typ_type:
          self_type NULL ptr== typ_type NULL ptr== or
          dup not if
            drop
            self_type typ_type ==
          end
        end
      else if self.id Type.ARRAY_ID == do
        self 24 ptr+ (*Type) @ // TODO: Start using a cast and sizeoftype in here when compiler will allow
        typ 24 ptr+ (*Type) @
        ==
        self 32 ptr+ @
        typ 32 ptr+ @
        == and
      else
        1
      end end
    else
      0
    end
  end
end

struct (Type) PtrType
  Type type
end

struct (Type) ArrayType
  Type type
  int len
end

struct (Type) Struct
  Struct parent
  [Struct_FIELDS_SIZE] Type fields
end

nproc print_type Type typ:
  typ.id u_to_str puts " " puts
  typ.size u_to_str puts " " puts
  if typ.is_primitive do
    "primitive " puts
  end
  if typ.id Type.PTR_ID == do
    "to: " puts 
    if typ (PtrType) .type NULL ptr!= do 
      typ (PtrType) .type print_type 
    else
      "void " puts 
    end
  end
  if typ.id Type.ARRAY_ID == do
    "len: " puts 
    typ (ArrayType) .len u_to_str puts    
    " of: " puts 
    typ (ArrayType) .type print_type
  end
  if typ.id Type.CUSTOM_TYPES_MIN_ID >= do
    if typ (Struct) .parent NULL ptr!= do
      "parent: " puts typ (Struct) .parent print_type
    end
    "fields: " puts
    typ (Struct) .fields 0
    0 typ (Struct) .fields [] NULL ptr!=
    while
      bind arr index: 
        index arr [] print_type
        " " puts
        arr index 1 +
        dup arr [] NULL ptr!=
      end
    end drop drop
  end
end