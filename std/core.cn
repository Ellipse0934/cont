include platform.cn
include stack.cn

proc / int int -> int: div drop end
proc % int int -> int: div swap drop end

proc ptr+ ptr int -> ptr:  swap  (int)      + (ptr) end
proc ptr- ptr int -> ptr:  swap  (int) swap - (ptr) end
proc +ptr int ptr -> ptr:        (int)      + (ptr) end
proc -ptr int ptr -> ptr:        (int)      - (ptr) end

proc ptr== ptr ptr -> int: (int) swap (int) == end
proc ptr!= ptr ptr -> int: (int) swap (int) != end

proc NULL -> ptr: 0 (ptr) end


proc inc ptr:
  dup @int 1 + swap ! 
end
proc dec ptr:
  dup @int 1 - swap ! 
end
proc inc8 ptr:
  dup @8 1 + swap !8 
end
proc dec8 ptr:
  dup @8 1 - swap !8 
end

nproc incby ptr ptr int by:
  ptr @int by + ptr !
end
nproc decby ptr ptr int by:
  ptr @int by - ptr !
end
nproc inc8by ptr ptr int by:
  ptr @8 by + ptr !8
end
nproc dec8by ptr ptr int by:
  ptr @8 by - ptr !8
end


proc @16 ptr -> int:
  #if platform Platform.fasm_x86_64_linux ==;
    shadowp
    asm "xor rax, rax"
    asm "pop rbx"
    asm "mov ax, [rbx]"
    asm "push rax"
    unshadowi
  #endif
  #if platform Platform.wat64 ==;
    (int)
    asm "i32.wrap_i64"
    asm "i64.load16_u"
  #endif
end
 
proc !16 int ptr:
  #if platform Platform.fasm_x86_64_linux ==;
    shadowp
    shadowi
    asm "pop rbx"
    asm "pop rcx"
    asm "mov [rbx], cx"
  #endif
  #if platform Platform.wat64 ==;
    // Type checking
    asm "i64.const 0"
    drop
    asm "i64.const 0"
    drop

    asm "call $prepare_store"
    asm "i64.store16"
  #endif
end

proc @32 ptr -> int:
  #if platform Platform.fasm_x86_64_linux ==;
    shadowp
    asm "xor rax, rax"
    asm "pop rbx"
    asm "mov eax, [rbx]"
    asm "push rax"
  unshadowi
  #endif
  #if platform Platform.wat64 ==;
    (int)
    asm "i32.wrap_i64"
    asm "i64.load32_u"
  #endif
end
 
proc !32 int ptr:
  #if platform Platform.fasm_x86_64_linux ==;
    shadowp
    shadowi
    asm "pop rbx"
    asm "pop rcx"
    asm "mov [rbx], ecx"
  #endif
  #if platform Platform.wat64 ==;
    // Type checking
    asm "i64.const 0"
    drop
    asm "i64.const 0"
    drop

    asm "call $prepare_store"
    asm "i64.store32"
  #endif
end

const DYNAMIC_ARRAY_SIZE 0x7FFFFFFFFFFFFFFF;


proc boolify int -> int: 0 != end

proc and int int -> int: boolify swap boolify + 1 >  end
proc or int int -> int:  boolify swap boolify + 0 >  end
proc not int -> int:     boolify 1 -  boolify        end
proc xor int int -> int: boolify swap boolify + 1 == end


proc & int int -> int: 
  #if platform Platform.fasm_x86_64_linux ==;
    shadowi shadowi
    asm "pop rax"
    asm "pop rbx"
    asm "and rax, rbx"
    asm "push rax"
    unshadowi
  #endif
  #if platform Platform.wat64 ==;
    // Type checking
    asm "i64.const 0"
    drop
    asm "i64.and"
  #endif
end

proc | int int -> int: 
  #if platform Platform.fasm_x86_64_linux ==;
    shadowi shadowi
    asm "pop rax"
    asm "pop rbx"
    asm "or rax, rbx"
    asm "push rax"
    unshadowi
  #endif
  #if platform Platform.wat64 ==;
    // Type checking
    asm "i64.const 0"
    drop
    asm "i64.or"
  #endif
end

proc bnot int -> int: 
  #if platform Platform.fasm_x86_64_linux ==;
    asm "pop rax"
    asm "not rax"
    asm "push rax"
  #endif
  #if platform Platform.wat64 ==;
    asm "i64.const -1"
    asm "i64.xor"
  #endif
end

proc ^ int int -> int: 
  #if platform Platform.fasm_x86_64_linux ==;
    shadowi shadowi
    asm "pop rax"
    asm "pop rbx"
    asm "xor rax, rbx"
    asm "push rax"
    unshadowi
  #endif
  #if platform Platform.wat64 ==;
    // Type checking
    asm "i64.const 0"
    drop
    asm "i64.xor"
  #endif
end

proc >> int int -> int:
  #if platform Platform.fasm_x86_64_linux ==;
    shadow shadow
    asm "pop rcx"
    asm "pop rbx"
    asm "shr rbx, cl"
    asm "push rbx"
    unshadowi
  #endif
  #if platform Platform.wat64 ==;
    // Type checking
    asm "i64.const 0"
    drop
    asm "i64.shr_u"
  #endif
end

proc << int int -> int:
  #if platform Platform.fasm_x86_64_linux ==;
    shadow shadow
    asm "pop rcx"
    asm "pop rbx"
    asm "shl rbx, cl"
    asm "push rbx"
    unshadowi
  #endif
  #if platform Platform.wat64 ==;
    // Type checking
    asm "i64.const 0"
    drop
    asm "i64.shl"
  #endif
end