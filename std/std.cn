include os.cn

proc / int int -> int: div drop end
proc % int int -> int: div swap drop end

proc ptr+ ptr int -> ptr:  swap  (int)      + (ptr) end
proc ptr- ptr int -> ptr:  swap  (int) swap - (ptr) end
proc +ptr int ptr -> ptr:        (int)      + (ptr) end
proc -ptr int ptr -> ptr:        (int)      - (ptr) end
proc ptr== ptr ptr -> int: (int) swap  (int) ==     end

proc NULL -> ptr: 0 (ptr) end

proc inc ptr:
  dup @int 1 + swap ! 
end
proc dec ptr:
  dup @int 1 - swap ! 
end
proc inc8 ptr:
  dup @8 1 + swap !8 
end
proc dec8 ptr:
  dup @8 1 - swap !8 
end

proc incby ptr int:
  bind ptr by:
    ptr @int by + ptr !
  end
end
proc decby ptr int:
  bind ptr by:
    ptr @int by - ptr !
  end
end
proc inc8by ptr int:
  bind ptr by:
    ptr @8 by + ptr !8
  end
end
proc dec8by ptr int:
  bind ptr by:
    ptr @8 by - ptr !8
  end
end

proc boolify int -> int: 0 > end

proc and int int -> int: boolify swap boolify + 1 >  end
proc or int int -> int:  boolify swap boolify + 0 >  end
proc not int -> int:     boolify 1 -  boolify        end
proc xor int int -> int: boolify swap boolify + 1 == end

struct str
  int len
  ptr data
end

proc 2duppi ptr int -> ptr int ptr int:
  bind a b:
    a b a b
  end
end
proc 2dupip int ptr -> int ptr int ptr:
  bind a b:
    a b a b
  end
end

proc puts @str: STDOUT write drop end 
proc input ptr -> @str: dup 1024 swap STDIN read swap end

proc null_str_len ptr -> int:
  0 swap
  dup @8 0 !=
  while
    swap 1 +
    dup rot dup rot ptr+ @8 0 !=
  end drop
end

proc nstr_to_str ptr -> @str: dup null_str_len swap end

proc open2 int @str -> int:
  swap drop opensys2
end
proc open int int @str -> int:
  swap drop opensys
end
proc time -> int:
  NULL timesys
end

proc clear_buf int ptr:
  bind len ptr:
    0
    len 0 >
    while
      bind index: 
        0 ptr index ptr+ !8
        index 1 +
      end
      dup len < 
    end
    drop
  end
end

proc cpy_buf int ptr ptr:
  bind size buf des:
    0
    size 0 >
    while
      bind index: 
        buf index ptr+ @8
        des index ptr+ !8
        index 1 +
      end
      dup size < 
    end
    drop
  end
end 

proc streq @str @str -> int:
  bind len data len2 data2:
    len2 len == if
      0 1
      len 0 >
      while
        drop
        bind curlen:
          curlen
          data curlen ptr+ @8
          data2 curlen ptr+ @8
          ==
        end
        bind curlen res:
          curlen 1 + res
          curlen 1 + len <
          res and
        end
      end
      swap drop
    else
      0
    end 
  end
end
