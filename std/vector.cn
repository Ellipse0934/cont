include std.cn

const VEC_INIT_CAPACITY 10;
const VEC_CAPACITY_STEP 10;

proc IntVectorIterPredicate int:
  drop
end

proc IntVectorMapPredicate int -> int:
end

struct IntVector
  int capacity
  int len
  [DYNAMIC_ARRAY_SIZE] int data

  nproc __init__:
    VEC_INIT_CAPACITY !self.capacity
    self.capacity sizeoftype int * malloc !self.data
    0 !self.len
  end

  nproc check_innitted:
    self.data NULL ptr== if
      "Vector wasn't innitted" println
      1 exit
    end 
  end

  nproc allocate int capacity_delta:
    self.check_innitted
    self.capacity capacity_delta + sizeoftype int * malloc
    let new_data;
    self.len sizeoftype int * self.data new_data cpy_buf
    self.data free
    *self.capacity capacity_delta incby
    new_data !self.data
  end

  nproc reallocate:
    self.check_innitted
    VEC_CAPACITY_STEP self.allocate
  end

  // Public
  nproc push int value:
    self.check_innitted
    if self.len self.capacity == do
      self.reallocate
    end
    value self.data self.len sizeoftype int * ptr+ !
    *self.len inc
  end

  nproc extend int len ptr data:
    self.check_innitted
    len self.capacity self.len - - self.allocate
    len sizeoftype int * data self.len self.data *[] memcpy
    self.capacity !self.len
  end

  nproc extend_vec IntVector vec:
    self.check_innitted
    vec.check_innitted
    vec.len vec.data self.extend
  end

  nproc remove int index:
    self.check_innitted
    if index self.len >= do
      "Index out of bounds for remove" println
      1 exit
    end
    self.len index - 1 -                      // size
    index 1 + sizeoftype int * self.data +ptr // src
    index sizeoftype int *     self.data +ptr // dst 
    memcpy
    *self.len dec
  end

  nproc iter addr IntVectorIterPredicate predicate:
    self.check_innitted
    0
    while dup self.len < do
      dup self.data []
      predicate call
      1 +
    end drop
  end

  nproc map addr IntVectorMapPredicate predicate -> IntVector:
    self.check_innitted
    sizeoftype IntVector malloc (IntVector)
    let new;
    new.__init__
    self.capacity new.capacity -
    if dup 0 > do
      dup new.allocate
    end drop
    0
    while dup self.len < do
      dup self.data []
      predicate call
      new.push
      1 +
    end drop
    new
  end

  nproc __index_ptr__ int index -> *int:
    self.check_innitted
    if index self.len >= index 0 < or do
      "Index out of range for vector: " puts
      index print
      1 exit
    end
    index self.data *[]
  end

  nproc __index__ int index -> int:
    index self.__index_ptr__ @
  end
end