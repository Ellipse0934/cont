include std.cn

unpack struct Vector2
  int x
  int y
  static 
  proc from_array [2] int -> Vector2:
    bind arr:
      0 arr []
      1 arr []
      Vector2
    end
  end

  static proc print_type_name:
    "Vector2" println
  end
  proc lowest_ancestor_name -> @str:
    "Vector2"
  end
end

struct (Vector2) AutoVector2
  proc __init__:  
    bind self:
      69 !self.x
      42 !self.y
    end 
    "Side effect\n" puts
  end
end

struct Vector3
  int x
  int y
  int z
end

struct (Vector2) Vector4
  int z
  int w

  static proc print_type_name:
    "Vector4" println
  end
end

proc [Vector2] 3diffy -> Vector3:
  // I can use unpacking here, but i want to test getting fields
  bind self:
    self.x
    self .y
  end
  0 Vector3
end

69 42 Vector2
bind vec:
  vec @ 
  swap print print
  vec .3diffy
  dup .x print
  dup .y print
  dup .z print
  3 4 vec upcast(Vector4)
  dup .z print
  dup .w print 
end

AutoVector2 .y print

var arr [2] int
45 0 arr *[] !
123 1 arr *[] !
arr Vector2.from_array
dup .x print
.y print
Vector2.print_type_name
Vector4.print_type_name
Vector2.lowest_ancestor_name println
Vector4.lowest_ancestor_name println
:
69
42
69
42
0
3
4
Side effect
42
45
123
Vector2
Vector4
Vector2
Vector2
