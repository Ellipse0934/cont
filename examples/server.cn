include std.cn
include io.cn
include http.cn

const PORT 8080;

nproc check_exists str route -> int:
  1 route @ str_slice1 str_to_nstr
  R_OK over access
  swap free
end

nproc get_extension str route -> @str:
  route @ "." str_rfind
  if dup -1 == do
    drop ""
  else
    1 + route @ str_slice1
  end
end

nproc handler HTTPRequest req:
  if req.route check_exists 0 == do
    O_RDONLY 1 req.route @ str_slice1
    init var file File
    file.read_all let len data;
    req.route get_extension let ext_len ext_data;
    if ext_len ext_data "html" streq do
      "HTTP/1.1 200 OK\r\nConnection: keep-alive\r\nContent-Type: text/html\r\nContent-Length: " req.conn.write
    else
      if ext_len ext_data "wasm" streq do
        "HTTP/1.1 200 OK\r\nConnection: keep-alive\r\nContent-Type: application/wasm\r\nContent-Length: " req.conn.write
      else
        "HTTP/1.1 200 OK\r\nConnection: keep-alive\r\nContent-Type: text/plain\r\nContent-Length: " req.conn.write
      end
    end
    len u_to_str let length_len length_data; 
    length_len length_data req.conn.write
    length_data free
    "\r\n\r\n" req.conn.write
    len data req.conn.write
    data free
  else
    // One string for performance to minimize number of syscalls 
    "HTTP/1.1 404 Not found\r\nConnection: keep-alive\r\nContent-Length: 18\r\nContent-Type: text/html\r\n\r\n<h1>Not found</h1>" 
    req.conn.write
  end
end

PORT
init var server HTTPServer

*handler server.run